
; ******************************************************
; idea: 
; negation all found solutions at the end of the lines (written as solution <id>) untill unsat result
; for example, first solution is (1,3) (2,1) (3,4) (4,2):
;(model 
;  (define-fun p ((x!0 Int) (x!1 Int)) Bool
;    (or (and (= x!0 1) (= x!1 3))
;        (and (= x!0 2) (= x!1 1))
;        (and (= x!0 3) (= x!1 4))
;        (and (= x!0 4) (= x!1 2))))
;)
; so i write this in the end after finding above solution:
;(assert
;    (not (and
;        (p 1 3)
;        (p 2 1)
;        (p 3 4)
;        (p 4 2)
;    ))
;)
; this can be done by the result unsat
; for 4-queens problem, there are 2 solutions, so there are 2 additional (assert  ...) in the end.
;
; ******************************************************

(declare-fun p (Int Int) Bool)


(assert
(and
    ; at least 1 true in row
    (and
        (or (p 1 1) (p 1 2) (p 1 3) (p 1 4))
        (or (p 2 1) (p 2 2) (p 2 3) (p 2 4))
        (or (p 3 1) (p 3 2) (p 3 3) (p 3 4))
        (or (p 4 1) (p 4 2) (p 4 3) (p 4 4))
    )

    ; at most 1 true in row
    (and
        (or (not (p 1 1)) (not (p 1 2)))
        (or (not (p 1 1)) (not (p 1 3)))
        (or (not (p 1 1)) (not (p 1 4)))
        (or (not (p 1 2)) (not (p 1 3)))
        (or (not (p 1 2)) (not (p 1 4)))
        (or (not (p 1 3)) (not (p 1 4)))
        (or (not (p 2 1)) (not (p 2 2)))
        (or (not (p 2 1)) (not (p 2 3)))
        (or (not (p 2 1)) (not (p 2 4)))
        (or (not (p 2 2)) (not (p 2 3)))
        (or (not (p 2 2)) (not (p 2 4)))
        (or (not (p 2 3)) (not (p 2 4)))
        (or (not (p 3 1)) (not (p 3 2)))
        (or (not (p 3 1)) (not (p 3 3)))
        (or (not (p 3 1)) (not (p 3 4)))
        (or (not (p 3 2)) (not (p 3 3)))
        (or (not (p 3 2)) (not (p 3 4)))
        (or (not (p 3 3)) (not (p 3 4)))
        (or (not (p 4 1)) (not (p 4 2)))
        (or (not (p 4 1)) (not (p 4 3)))
        (or (not (p 4 1)) (not (p 4 4)))
        (or (not (p 4 2)) (not (p 4 3)))
        (or (not (p 4 2)) (not (p 4 4)))
        (or (not (p 4 3)) (not (p 4 4)))
    )

    ; at least 1 true in col
    (and
        (or (p 1 1) (p 2 1) (p 3 1) (p 4 1))
        (or (p 1 2) (p 2 2) (p 3 2) (p 4 2))
        (or (p 1 3) (p 2 3) (p 3 3) (p 4 3))
        (or (p 1 4) (p 2 4) (p 3 4) (p 4 4))
    )

    ; at most 1 true in col
    (and
        (or (not (p 1 1)) (not (p 1 2)))
        (or (not (p 1 1)) (not (p 1 3)))
        (or (not (p 1 1)) (not (p 1 4)))
        (or (not (p 2 1)) (not (p 2 2)))
        (or (not (p 2 1)) (not (p 2 3)))
        (or (not (p 2 1)) (not (p 2 4)))
        (or (not (p 3 1)) (not (p 3 2)))
        (or (not (p 3 1)) (not (p 3 3)))
        (or (not (p 3 1)) (not (p 3 4)))
        (or (not (p 4 1)) (not (p 4 2)))
        (or (not (p 4 1)) (not (p 4 3)))
        (or (not (p 4 1)) (not (p 4 4)))
        (or (not (p 1 2)) (not (p 1 3)))
        (or (not (p 1 2)) (not (p 1 4)))
        (or (not (p 2 2)) (not (p 2 3)))
        (or (not (p 2 2)) (not (p 2 4)))
        (or (not (p 3 2)) (not (p 3 3)))
        (or (not (p 3 2)) (not (p 3 4)))
        (or (not (p 4 2)) (not (p 4 3)))
        (or (not (p 4 2)) (not (p 4 4)))
        (or (not (p 1 3)) (not (p 1 4)))
        (or (not (p 2 3)) (not (p 2 4)))
        (or (not (p 3 3)) (not (p 3 4)))
        (or (not (p 4 3)) (not (p 4 4)))
    )

    ; at most 1 queen at diagonals
    (and
        (or (not (p 1 1)) (not (p 2 2)))
        (or (not (p 1 2)) (not (p 2 1)))
        (or (not (p 1 2)) (not (p 2 3)))
        (or (not (p 1 3)) (not (p 2 2)))
        (or (not (p 1 3)) (not (p 2 4)))
        (or (not (p 1 4)) (not (p 2 3)))
        (or (not (p 1 1)) (not (p 3 3)))
        (or (not (p 1 2)) (not (p 3 4)))
        (or (not (p 1 3)) (not (p 3 1)))
        (or (not (p 1 4)) (not (p 3 2)))
        (or (not (p 1 1)) (not (p 4 4)))
        (or (not (p 1 4)) (not (p 4 1)))
        (or (not (p 2 1)) (not (p 3 2)))
        (or (not (p 2 2)) (not (p 3 1)))
        (or (not (p 2 2)) (not (p 3 3)))
        (or (not (p 2 3)) (not (p 3 2)))
        (or (not (p 2 3)) (not (p 3 4)))
        (or (not (p 2 4)) (not (p 3 3)))
        (or (not (p 2 1)) (not (p 4 3)))
        (or (not (p 2 2)) (not (p 4 4)))
        (or (not (p 2 3)) (not (p 4 1)))
        (or (not (p 2 4)) (not (p 4 2)))
        (or (not (p 3 1)) (not (p 4 2)))
        (or (not (p 3 2)) (not (p 4 1)))
        (or (not (p 3 2)) (not (p 4 3)))
        (or (not (p 3 3)) (not (p 4 2)))
        (or (not (p 3 3)) (not (p 4 4)))
        (or (not (p 3 4)) (not (p 4 3)))
    )


)
)

; solution 1
(assert
    (not (and
        (p 1 3)
        (p 2 1)
        (p 3 4)
        (p 4 2)
    ))
)


; solution 2
;(assert
;    (not (and
;        (p 1 2)
;        (p 2 4)
;        (p 3 1)
;        (p 4 3)
;    ))
;)

(check-sat)
(get-model)